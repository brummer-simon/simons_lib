/**
 * @file      RandomNumberGeneratorImpl.hpp
 * @author    Simon Brummer (<simon.brummer@posteo.de>)
 * @brief     Thin wrapper around STL random facilities.
 * @copyright 2018 Simon Brummer. All rights reserved.\n
 *            This project is released under the BSD 3-Clause License.
 */

/*
 * BSD 3-Clause License
 *
 * Copyright (c) 2018, Simon Brummer
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * - Redistributions of source code must retain the above copyright notice, this
 *   list of conditions and the following disclaimer.
 *
 * - Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * - Neither the name of the copyright holder nor the names of its
 *   contributors may be used to endorse or promote products derived from
 *   this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef RANDOM_NUMBER_GENERATOR_IMPL_HPP_20180923091648
#define RANDOM_NUMBER_GENERATOR_IMPL_HPP_20180923091648

#include <random>
#include "../LockGuard.hpp"
#include "../NullTypes.hpp"

namespace simons_lib::random_number_generator
{

/**
 * @brief Thin wrapper around the STL random number generator facilities.
 * @tparam E   Random engine type to use.
 * @tparam D   Distribution type to use.
 * @tparam M   Mutex used for synchronization, defaults to NullMutex.
 *             If thread safety is required, supply std::mutex
 */
template <typename E, typename D, typename M = simons_lib::null_types::NullMutex>
class RandomNumberGenerator
{
public:
    /// @brief Used random engine type.
    using EngineType = E;
    /// @brief Used random distribution type.
    using DistributionType = D;
    /// @brief Used mutex type for synchronization.
    using MutexType = M;
    /// @brief Lock to use with given mutex.
    using LockType = simons_lib::lock::LockGuard<MutexType>;
    /// @brief type of resulting values generated by RNG
    using ResultType = typename DistributionType::result_type;
    /// @brief type of RNG seed
    using SeedType = typename EngineType::result_type;

    /**
     * @brief Constructor. Create RNG with a given seed.
     * @param[in] seed   The seed used to initialize RNGs random engine.
     */
    RandomNumberGenerator(SeedType seed)
        : m_engine()
        , m_distribution()
        , m_mutex()
    {
        m_engine.seed(seed);
    }

    /**
     * @brief Set lower and upper Boundaries for the RNG.
     * @param[in] lowerBound   The lower boundary of the value interval.
     * @param[in] upperBound   The upper boundary of the value interval.
     * @returns true in case of success, false if @p lowerBound > @p upperBound.
     */
    bool setBoundries(ResultType lowerBound, ResultType upperBound)
    {
        auto guard = LockType(m_mutex);
        if (lowerBound > upperBound)
        {
            return false;
        }
        m_distribution.param(typename DistributionType::param_type(lowerBound, upperBound));
        return true;
    }

    /**
     * @brief Get next random number.
     * @returns random number
     */
    ResultType operator () (void)
    {
        auto guard = LockType(m_mutex);
        return m_distribution(m_engine);
    }

private:
    EngineType       m_engine;
    DistributionType m_distribution;
    MutexType        m_mutex;
};

} // namespace simons_lib::random_number_generator

#endif // RANDOM_NUMBER_GENERATOR_IMPL_HPP_20180923091648
